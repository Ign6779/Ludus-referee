# Assuming 'images_folder' is the path to your images folder and 'csv_path' is the path to your CSV file
pairs, labels = prepare_data(r"C:\Users\ignac\Documents\InHolland\Year 3\Ludus project\Ludus-referee\siamese\image_pairs.csv", r"C:\Users\ignac\Documents\InHolland\Year 3\Ludus project\Ludus-referee\siamese\image_dataset")

# Split pairs and labels for training, if necessary. Here pairs[:, 0] and pairs[:, 1] are used directly.

x_train, x_test, y_train, y_test = train_test_split(pairs, labels, test_size=0.20, random_state=42)
# You might want to split your dataset into a training and validation set.

# Now, train your model
print("model training")
print()
history = siamnet.train_model(x_train[:, 0], x_train[:, 1], y_train, 60, 32)
print("model has been trained")
print()
print("model testing")
siamnet.test_model(x_test[:, 0], x_test[:, 1], y_test)

siamnet.analyze_image(load_and_preprocess_image(r"C:/Users/ignac/Documents/InHolland/Year 3/Ludus project/temp/vid10_pair8_frame383.jpg"), load_and_preprocess_image(r"C:/Users/ignac/Documents/InHolland/Year 3/Ludus project/temp/vid10_pair8_frame428.jpg"), 0.1)

# Plot training & validation loss values
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'])
if 'val_loss' in history.history:
    plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')

# Plot training & validation accuracy
plt.subplot(1, 2, 2)
plt.plot(history.history['lambda'])
if 'val_lambda' in history.history:
    plt.plot(history.history['val_lambda'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.tight_layout()
plt.show()